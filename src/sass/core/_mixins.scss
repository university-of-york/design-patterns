//
// MIXINS
//

//
// Invisible visually but still accessible for screen readers
//
@mixin is-invisible() {
  color:transparent;
  text-decoration:none;
  z-index:0;
  border: 0;
  clip: rect(0 0 0 0);
  height: 1px;
  margin: -1px;
  overflow: hidden;
  padding: 0;
  position: absolute;
  width: 1px;
}
//
// Tiny padding - reduce left and right padding on tiny screens
//
@mixin tiny-padding() {
  padding-left:$base-spacing;
  padding-right:$base-spacing;
  @include mq(tiny, '-') {
    padding-left:$base-spacing/2;
    padding-right:$base-spacing/2;
  }
}

//
// Media query mixin
// Pass it a size (tiny, small, medium, large, huge)
// And scope ('~' [1], '+' [2], '++' [3], '-' [4], '--' [5])
// No need for mq with (tiny, '+') - it includes everything!
@mixin mq($size, $scope:'~') {

  // Max size is one pixel (1/16em) under $size
  $max: map-get($breakpoints, $size) - 0.0625em;
  $min: 0;

  // Min size is next size down
  @if $size == tiny {
    $min: 0;
  } @else if $size == small {
    $min: map-get($breakpoints, tiny);
  } @else if $size == medium {
    $min: map-get($breakpoints, small);
  } @else if $size == large {
    $min: map-get($breakpoints, medium);
  } @else if $size == huge {
    $min: map-get($breakpoints, large);
  }

  @if $scope == '~' {
    // [1] This size only
    @media only screen and (min-width: $min) and (max-width: $max) {
      @content;
    }
  } @else if $scope == '+' {
    // [2] This size and bigger
    @media only screen and (min-width: $min) {
      @content;
    }
  } @else if $scope == '++' {
    // [3] Bigger than this size
    @media only screen and (min-width: $max) {
      @content;
    }
  } @else if $scope == '-' {
    // [4] This size and smaller
    @media only screen and (max-width: $max) {
      @content;
    }
  } @else if $scope == '--' {
    // [5] Smaller than this size
    @media only screen and (max-width: $min) {
      @content;
    }
  }

}

// Inline link layout (utility links etc.)
@mixin inline-links() {
  list-style:none;
  margin-top:0;
  margin-bottom:0;
  padding:0;
  li {
    float:left;
  }
}

// Make it round
@mixin round() {
  border-radius:50%;
}

//
// Demarginalise:
// Remove top margin from first child and last margin from bottom child
// Use on padded components
@mixin demarginalise() {
  > :first-child {
    margin-top:0;
  }
  > :last-child {
    margin-bottom:0;
  }
}

//
//Clearfix
//
@mixin clearfix() {
  &:before,
  &:after {
    content: "";
    display: table;
    clear: both;
  }
}

//
// Image caption/content style
//
@mixin image-caption() {
  @include demarginalise;
  display:inline;
  position:absolute;
}

//
// Default component details
//
@mixin component() {
  // Default margin
  @include component-margin;
  // Fill height in equal row grid boxes
  .js-equal-height-row &:only-child {
    height:100%;
    height:calc(100% - #{$base-spacing}); //Takes bottom margin into account
  }
}
//
// Default component margins
//
@mixin component-margin() {
  margin:0 0 $base-spacing;
}

//
// Horiz/vertical alignment of overflowing figures
// Only when width and height are set
//
@mixin center-image($axis: 'xy') {

  $top:50%;
  $left:50%;
  $transform: translate(-50%, -50%);

  @if $axis == 'x' {
    $transform: translateX(-50%);
    $top:0%
  } @else if $axis == 'y' {
    $transform: translateY(-50%);
    $left:0%;
  }

  .csstransforms & {
    position:relative;
    img {
      position:absolute;
      @include mq(small, '+') {
      max-width:none;
      max-height:none;
      }
      top:$top;
      left:$left;
      transform:$transform;
      -webkit-transform:$transform;
    }
  }
}
// Must be overridden when there's a set height
// otherwise it will stretch the image
@mixin set-height-figure() {
  img {
    max-width:none;
    width:auto;
    max-height:100%;
  }
}
// Same for width
@mixin set-width-figure() {
  img {
    max-width:100%;
    max-height:none;
    height:auto;
  }
}
//
// Generate a font-size and line-height.
//

@mixin font-size($font-size: $base-font-size, $line-height: $base-line-height) {

  // rem with pixel fallback
  font-size: $font-size;
  font-size: ($font-size / $base-font-size) * 1rem;

  @if (type-of($line-height) == number or $line-height == inherit or $line-height == normal) {
    line-height: $line-height;
  } @elseif ($line-height != none and $line-height != false) {
    @warn "D’oh! ‘#{$line-height}’ is not a valid value for `line-height`.";
  }

}


//
// Generate font sizes from a map for each breakpoint
// http://www.smashingmagazine.com/2015/06/17/responsive-typography-with-sass-maps/
//
@mixin responsive-font-size($fs-map, $fs-breakpoints: $breakpoints){
  @each $fs-breakpoint, $fs-font-size in $fs-map {
    @if $fs-breakpoint == null {
      @include make-font-size($fs-font-size);
    }
    @else {
      // If $fs-font-size is a key that exists in
      // $fs-breakpoints, use the value
      @if map-has-key($fs-breakpoints, $fs-breakpoint) {
        $fs-breakpoint: map-get($fs-breakpoints, $fs-breakpoint);
      }
      @media screen and (min-width: $fs-breakpoint) {
        @include make-font-size($fs-font-size);
      }
    }
  }
}

// Utility function for responsive-font-size mixin
@mixin make-font-size($fs-font-size) {
  // If $fs-font-size is a list, include
  // both font-size and line-height
  @if type-of($fs-font-size) == "list" {
    @include pixels-to-rems(nth($fs-font-size, 1));
    @if (length($fs-font-size) > 1) {
      line-height: nth($fs-font-size, 2);
    }
  }
  @else {
    @include pixels-to-rems($fs-font-size);
  }
}

// Convert pixel sizes to REMs, with fallback
@mixin pixels-to-rems($pixel-size) {
  font-size: $pixel-size;
  font-size: ($pixel-size / $base-font-size) * 1rem;
}

//
// Default transition
// You can pass a comma-separated list of properties here if you like
//
@mixin transition($property:'all') {
  transition-property: #{$property};
  transition-duration: 0.4s;
  transition-timing-function: ease-out;
}

//
// Get color from color map
//
@function color($color, $tone: 'base') {
    @return map-get(map-get($colors, $color), $tone);
}

//
// Reverse the order of a Sass map
//
@function mapReverse ($map) {
    $result: null;

    @if type-of($map) == "map" {
        $keys: map-keys($map);
        $map-reversed: ();

        @for $i from length($keys) through 1 {
            $map-reversed: map-merge(
                $map-reversed,
                (nth($keys, $i): map-get($map, nth($keys, $i)))
            );
        }

        @if type-of($map-reversed) == "map" {
            $result: $map-reversed;
        } @else {
            @warn 'There was an error reversing the order of "#{$map}"';
        }
    } @else {
        @warn '"#{$map}" is not a valid map';
    }

    @return $result;
}
